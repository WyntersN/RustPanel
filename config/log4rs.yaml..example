refresh_rate: 30 seconds
appenders:
  stdout:
    kind: console
    encoder:
      pattern: "{d(%Y-%m-%d %H:%M:%S)} | {h({l})} [{M}-{f}] | {h({m})}{n}"
  file:
    kind: file
    path: runtime/logs/panel.log
    append: true
    encoder:
      pattern: "{d(%Y-%m-%d %H:%M:%S)} | {l} [{M}-{f}] | {m}{n}"
  rolling_file:
    kind: rolling_file
    path: runtime/logs/panel.log
    append: true 
    encoder:
      pattern: "{d(%Y-%m-%d %H:%M:%S)} | {l} [{M}-{f}] | {m}{n}"
    policy:
      kind: compound
      trigger:
        kind: size
        limit: 10 mb
      roller:
      #Fixed Window
      #Write a file to test.log every time, and when the test.log file reaches the triggering strategy, move the file one bit back.
      #When triggered, create the test.1.log file, which will be changed from the original test.1.log file to the test.2.log file, and be postponed in sequence, but only the set number of logs will be retained, and any excess will be deleted.
        kind: fixed_window
        # 分割文件名称
        pattern: runtime/logs/panel.{}.log
        base: 1
        count: 10
root:
  # Configure the log level for output
  # trace < debug < info < warn < error
  level: info 
  appenders:
    - stdout
    - rolling_file
loggers:
  app::backend::db:
    level: info
  app::requests:
    level: info
    appenders:
      - stdout
    additive: false